generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Article {
  id          String                @id @default(uuid())
  title       String
  filePath    String
  createdAt   DateTime              @default(now())
  updateAt    DateTime              @updatedAt
  userId      String?
  sessionId   String?

  author      String?
  year        String?
  abstract    String?
  keywords    String?
  doi         String?

  annotations Annotation[]
  session     BrainstormingSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        User?                 @relation(fields: [userId], references: [id])
  edges       Edge[]
  nodes       Node[]
}

model Node {
  id             String  @id @default(uuid())
  label          String
  title          String?
  att_goal       String?
  att_method     String?
  att_background String?
  att_future     String?
  att_gaps       String?
  att_url        String?
  type           String
  content        String
  articleId      String
  fromEdges      Edge[]  @relation("EdgeFrom")
  toEdges        Edge[]  @relation("EdgeTo")
  article        Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Edge {
  id        String  @id @default(uuid())
  fromId    String
  toId      String
  relation  String?
  label     String?
  color     String?
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  from      Node    @relation("EdgeFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to        Node    @relation("EdgeTo", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId, relation])
}

model Analytics {
  id        Int      @id @default(autoincrement())
  action    String
  document  String?
  userId    String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("analytics")
}

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  name                 String?
  password             String
  role                 Role                   @default(USER)
  createdAt            DateTime               @default(now())
  updateAt             DateTime               @updatedAt
  group                String?
  nim                  String?
  annotations          Annotation[]
  articles             Article[]
  brainstormingSession BrainstormingSession[]
  drafts               Draft[]
  writerSessions       WriterSession[]
  tokenUsages            TokenUsage[]
}

model Draft {
  id        String         @id @default(uuid())
  userId    String?
  title     String
  createdAt DateTime       @default(now())
  writerId  String?
  writerSession  WriterSession?  @relation(fields: [writerId], references: [id], onDelete: Cascade)
  user      User?          @relation(fields: [userId], references: [id])
  sections  DraftSection[]
}

model DraftSection {
  id          String       @id @default(uuid())
  draftId     String
  title       String
  content     String
  annotations Annotation[]
  draft       Draft        @relation(fields: [draftId], references: [id], onDelete: Cascade)
}

model Annotation {
  id              String        @id @default(uuid())
  userId          String?
  articleId       String?
  page            Int
  highlightedText String
  comment         String
  semanticTag     String?
  draftSectionId  String?
  createdAt       DateTime      @default(now())
  article         Article?      @relation(fields: [articleId], references: [id])
  draftSection    DraftSection? @relation(fields: [draftSectionId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
}

model BrainstormingSession {
  id                     String        @id @default(uuid())
  title                  String
  description            String?
  userId                 String
  selectedFilterArticles String[]      @default([])
  lastSelectedNodeId     String?
  lastSelectedEdgeId     String?
  graphFilters           Json?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  lastActivity           DateTime      @default(now())
  coverColor             String        @default("#4c6ef5")
  articles               Article[]
  user                   User          @relation(fields: [userId], references: [id])
  chatMessages           ChatMessage[]
  tokenUsages            TokenUsage[]
}

model ChatMessage {
  id             String               @id @default(uuid())
  sessionId      String
  content        String
  role           String
  references     Json?
  createdAt      DateTime             @default(now())
  contextEdgeIds String[]             @default([])
  contextNodeIds String[]             @default([])
  session        BrainstormingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model WriterSession {
  id                     String        @id @default(uuid())
  title                  String
  description            String?
  userId                 String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  lastActivity           DateTime      @default(now())
  coverColor             String        @default("#4c6ef5")
  drafts                 Draft[]
  user                   User          @relation(fields: [userId], references: [id])
}

model Document {
  id        String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  metadata  Json                       @default("{}")
  embedding Unsupported("vector(768)")? // Keep original vector type
  createdAt DateTime                   @default(now()) @map("created_at") @db.Timestamptz

  @@map("documents")
}

model TokenUsage {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId   String?    // Optional: jika berkaitan dengan sesi brainstorming
  session     BrainstormingSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  tokensUsed  Int        // total token (input + output)
  inputTokens Int        @default(0)
  outputTokens Int       @default(0)
  model       String     // contoh: "gpt-4", "gemini-pro", dll
  purpose     String     // contoh: "chat", "summarization", "upload-analysis"
  metadata    Json?      // optional info tambahan (artikel, node id, prompt, dsb)
  createdAt   DateTime   @default(now())

  // Index untuk query per user dan per sesi
  @@index([userId])
  @@index([sessionId])
}
